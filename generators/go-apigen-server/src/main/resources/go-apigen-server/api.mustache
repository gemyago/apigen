package {{package}}

import (
	"net/http"

	"{{invokerPackage}}/models"
)

{{#operations}}
{{#operation}}
{{#allParams.0}}{{#allParams}}{{#isEnum}}
{{>enums/api-param-type}}
{{/isEnum}}{{/allParams}}type {{>request-type}} struct {
	{{#allParams}}
	{{>api-param-name}} {{>api-param-type}}
	{{/allParams}}
}{{/allParams.0}}{{^-last}}

{{/-last}}
{{/operation}}

{{/operations}}

type {{baseName}}Controller struct {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	{{operationId}} httpHandlerFactory
{{/operation}}
{{/operations}}
}

type {{baseName}}ControllerBuilder struct {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	Handle{{operationId}} {{>action-builder-type}}
{{/operation}}
{{/operations}}
}

func (c *{{baseName}}ControllerBuilder) Finalize() *{{baseName}}Controller {
	// TODO: panic if any handler is null
	return &{{baseName}}Controller{
		{{#operations}}
		{{#operation}}
		{{operationId}}: c.Handle{{operationId}}.httpHandlerFactory,
		{{/operation}}
		{{/operations}}
	}
}

{{#operations}}
{{#operation}}
type {{baseName}}{{operationId}}ParamsParser struct {
	{{#allParams}}
	bind{{>api-param-name}} requestParamBinder[{{>api-param-binder-types}}]
	{{/allParams}}
}

func (p *{{baseName}}{{operationId}}ParamsParser) parse(router httpRouter, w http.ResponseWriter, req *http.Request) (*{{>request-type}}, error) {
	bindingCtx := bindingContext{}
	reqParams := &{{>request-type}}{}{{#hasQueryParams}}
	query := req.URL.Query(){{/hasQueryParams}}
	{{#allParams}}
	{{#isQueryParam}}p.bind{{>api-param-name}}(&bindingCtx, readQueryValue("{{baseName}}", query), &reqParams.{{>api-param-name}}){{/isQueryParam}}{{#isPathParam}}
	p.bind{{>api-param-name}}(&bindingCtx, readPathValue("{{baseName}}", router, req), &reqParams.{{>api-param-name}}){{/isPathParam}}{{#isBodyParam}}
	p.bind{{>api-param-name}}(&bindingCtx, optionalVal[*http.Request]{value: req, assigned: true}, &reqParams.Payload){{/isBodyParam}}
	{{/allParams}}
	return reqParams, bindingCtx.Error()
}

func new{{baseName}}{{operationId}}ParamsParser() *{{baseName}}{{operationId}}ParamsParser {
	return &{{baseName}}{{operationId}}ParamsParser{
		{{#allParams}}
		bind{{>api-param-name}}: newRequestParamBinder(binderParams[{{>api-param-binder-types}}]{
			field: "{{baseName}}",
			location: {{#isBodyParam}}"body"{{/isBodyParam}}{{^isBodyParam}}"{{#vendorExtensions}}{{x-codegen-param-in}}{{/vendorExtensions}}"{{/isBodyParam}},
			parseValue: {{#isBodyParam}}parseJsonPayload[{{>api-param-type}}]{{/isBodyParam}}{{^isBodyParam}}knownParsers.{{dataType}}_in_{{#vendorExtensions}}{{x-codegen-param-in}}{{/vendorExtensions}}{{/isBodyParam}},
			validateValue: newCompositeValidator[{{>api-param-binder-types}}]({{#required}}
				validateNonEmpty,{{/required}}{{#minimum}}
				newMinMaxValueValidator[{{>api-param-binder-types}}]({{.}}, {{exclusiveMinimum}}, true),{{/minimum}}{{#maximum}}
				newMinMaxValueValidator[{{>api-param-binder-types}}]({{.}}, {{exclusiveMaximum}}, false),{{/maximum}}
			),
		}),
		{{/allParams}}
	}
}
{{/operation}}
{{/operations}}

func Build{{baseName}}Controller() *{{baseName}}ControllerBuilder {
	controllerBuilder := &{{baseName}}ControllerBuilder{}
	{{#operations}}
	{{#operation}}
	controllerBuilder.Handle{{operationId}}.controllerBuilder = controllerBuilder
	controllerBuilder.Handle{{operationId}}.defaultStatusCode = {{#responses.0}}{{ code }}{{/responses.0}}
	controllerBuilder.Handle{{operationId}}.paramsParser = new{{baseName}}{{operationId}}ParamsParser()
	{{/operation}}
	{{/operations}}
	return controllerBuilder
}

func Mount{{baseName}}Routes(controller *{{baseName}}Controller, r httpRouter) {
	{{#operations}}
	{{#operation}}
	r.HandleRoute("{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}", "{{{path}}}", controller.{{operationId}}(r))
	{{/operation}}
	{{/operations}}
}
