{{ #generatedCodeComment }}// {{.}}.

{{/generatedCodeComment}}package {{package}}

import (
	"net/http"
	"time"
	{{#hasImportedModel}}

	. "{{invokerPackage}}/models"
{{/hasImportedModel}}
	. "{{invokerPackage}}/internal"
)

// Below is to workaround unused imports if that happens.
var _ = BindingContext{}
var _ = http.MethodGet
var _ = time.Time{}{{#hasImportedModel}}
type _ func() {{importedModels.0}}{{/hasImportedModel}}

{{#operations}}
{{#operation}}
{{#hasParams}}
type paramsParser{{baseName}}{{operationId}} struct {
	{{#allParams}}
	bind{{nameInPascalCase}} requestParamBinder[{{>params/binder-types}}]
	{{/allParams}}
}

func (p *paramsParser{{baseName}}{{operationId}}) parse(router httpRouter, req *http.Request) (*{{>request-type}}, error) {
	bindingCtx := BindingContext{}
	reqParams := &{{>request-type}}{}
	{{#pathParams}}
	{{#-first}}// path params
	pathParamsCtx := bindingCtx.Fork("path")
	{{/-first}}p.bind{{nameInPascalCase}}(pathParamsCtx.Fork("{{baseName}}"), readPathValue("{{baseName}}", router, req), &reqParams.{{nameInPascalCase}})
	{{/pathParams}}
	{{#queryParams}}
	{{#-first}}// query params
	query := req.URL.Query()
	queryParamsCtx := bindingCtx.Fork("query")
	{{/-first}}p.bind{{nameInPascalCase}}(queryParamsCtx.Fork("{{baseName}}"), readQueryValue("{{baseName}}", query), &reqParams.{{nameInPascalCase}})
	{{/queryParams}}
	{{#bodyParams}}
	{{#-first}}// body params
	{{/-first}}p.bind{{nameInPascalCase}}(bindingCtx.Fork("body"), readRequestBodyValue(req), &reqParams.Payload)
	{{/bodyParams}}
	return reqParams, bindingCtx.AggregatedError()
}

func newParamsParser{{baseName}}{{operationId}}() paramsParser[*{{>request-type}}] {
	return &paramsParser{{baseName}}{{operationId}}{
		{{#allParams}}
		bind{{nameInPascalCase}}: newRequestParamBinder(binderParams[{{>params/binder-types}}]{
			required: {{required}},{{#isBodyParam}}
			parseValue: parseSoloValueParamAsSoloValue(
				{{>params/parse-non-array-value}},
			),{{/isBodyParam}}{{^isBodyParam}}
			parseValue: parse{{#isPathParam}}Solo{{/isPathParam}}{{^isPathParam}}Multi{{/isPathParam}}ValueParamAs{{#isArray}}Slice{{/isArray}}{{^isArray}}SoloValue{{/isArray}}({{#isArray}}
				{{#items}}{{>params/parse-non-array-value}}{{/items}},{{/isArray}}{{^isArray}}
				{{>params/parse-non-array-value}},{{/isArray}}
			),{{/isBodyParam}}
			validateValue: {{#isArray}}NewArrayValidator(
				NewSimpleFieldValidator[{{>fields/type}}]({{#minItems}}
					NewMinMaxLengthValidator[{{#items}}{{>fields/type}}{{/items}}, {{>fields/type}}]({{.}}, true),{{/minItems}}{{#maxItems}}
					NewMinMaxLengthValidator[{{#items}}{{>fields/type}}{{/items}}, {{>fields/type}}]({{.}}, false),{{/maxItems}}
				),{{#items}}{{#isModel}}
				New{{{dataType}}}Validator(),{{/isModel}}{{^isModel}}
				{{#lambda.tab_indented_4}}{{>fields/simple-validator}}{{/lambda.tab_indented_4}},{{/isModel}}{{/items}}
			),{{/isArray}}{{^isArray}}{{#isModel}}{{>params/model-validator}},{{/isModel}}{{^isModel}}{{#lambda.tab_indented_3}}{{>fields/simple-validator}}{{/lambda.tab_indented_3}},{{/isModel}}{{/isArray}}
		}),
		{{/allParams}}
	}
}{{^-last}}

{{/-last}}{{/hasParams}}{{/operation}}
{{/operations}}
