{{ #generatedCodeComment }}// {{.}}.

{{/generatedCodeComment}}package {{package}}

import (
	"net/http"
	"time"
	{{#hasModel}}

	"{{invokerPackage}}/models"
{{/hasModel}}
)

// Below is to workaround unused imports.
var _ = time.Time{}

{{#operations}}
{{#operation}}
type paramsParser{{baseName}}{{operationId}} struct {
	{{#allParams}}
	bind{{>params/name}} requestParamBinder[{{>params/binder-types}}]
	{{/allParams}}
}

func (p *paramsParser{{baseName}}{{operationId}}) parse(router httpRouter, req *http.Request) (*{{>request-type}}, error) {
	bindingCtx := bindingContext{}
	reqParams := &{{>request-type}}{}
	{{#pathParams}}
	{{#-first}}// path params
	{{/-first}}p.bind{{>params/name}}(&bindingCtx, readPathValue("{{baseName}}", router, req), &reqParams.{{>params/name}})
	{{/pathParams}}
	{{#queryParams}}
	{{#-first}}// query params
	query := req.URL.Query()
	{{/-first}}p.bind{{>params/name}}(&bindingCtx, readQueryValue("{{baseName}}", query), &reqParams.{{>params/name}})
	{{/queryParams}}
	{{#bodyParams}}
	{{#-first}}// body params
	{{/-first}}p.bind{{>params/name}}(&bindingCtx, optionalVal[*http.Request]{value: req, assigned: true}, &reqParams.Payload)
	{{/bodyParams}}
	return reqParams, bindingCtx.AggregatedError()
}

func newParamsParser{{baseName}}{{operationId}}() *paramsParser{{baseName}}{{operationId}} {
	return &paramsParser{{baseName}}{{operationId}}{
		{{#allParams}}
		bind{{>params/name}}: newRequestParamBinder(binderParams[{{>params/binder-types}}]{
			field: "{{baseName}}",
			location: {{#isBodyParam}}"body"{{/isBodyParam}}{{^isBodyParam}}"{{#vendorExtensions}}{{x-codegen-param-in}}{{/vendorExtensions}}"{{/isBodyParam}},
			parseValue: {{#isBodyParam}}parseJSONPayload[{{>params/type}}]{{/isBodyParam}}{{^isBodyParam}}knownParsers.{{#isDate}}date{{/isDate}}{{#isDateTime}}time{{/isDateTime}}{{^isDate}}{{^isDateTime}}{{dataType}}{{/isDateTime}}{{/isDate}}In{{#vendorExtensions}}{{#lambda.titlecase}}{{x-codegen-param-in}}{{/lambda.titlecase}}{{/vendorExtensions}}{{/isBodyParam}},
			validateValue: newCompositeValidator[{{>params/binder-types}}]({{#required}}
				validateNonEmpty,{{/required}}{{#minimum}}
				newMinMaxValueValidator[{{>params/binder-types}}]({{.}}, {{exclusiveMinimum}}, true),{{/minimum}}{{#maximum}}
				newMinMaxValueValidator[{{>params/binder-types}}]({{.}}, {{exclusiveMaximum}}, false),{{/maximum}}{{^isDate}}{{^isDateTime}}{{#minLength}}
				newMinMaxLengthValidator[{{>params/binder-types}}]({{.}}, true),{{/minLength}}{{#maxLength}}
				newMinMaxLengthValidator[{{>params/binder-types}}]({{.}}, false),{{/maxLength}}{{#pattern}}
				newPatternValidator[{{>params/binder-types}}]("{{.}}"),{{/pattern}}{{/isDateTime}}{{/isDate}}
			),
		}),
		{{/allParams}}
	}
}{{^-last}}

{{/-last}}{{/operation}}
{{/operations}}
