{{ #generatedCodeComment }}// {{.}}.

{{/generatedCodeComment}}package {{package}}

import (
	"net/http"
	"time"
	{{#hasImportedModel}}

	"{{invokerPackage}}/models"
{{/hasImportedModel}}
	"{{invokerPackage}}/internal"
)

// Below is to workaround unused imports.
var _ = time.Time{}{{#hasImportedModel}}
var _ = {{importedModels.0}}{}{{/hasImportedModel}}

{{#operations}}
{{#operation}}
{{#hasParams}}
type paramsParser{{baseName}}{{operationId}} struct {
	{{#allParams}}
	bind{{nameInPascalCase}} requestParamBinder[{{>params/binder-types}}]
	{{/allParams}}
}

func (p *paramsParser{{baseName}}{{operationId}}) parse(router httpRouter, req *http.Request) (*{{>request-type}}, error) {
	bindingCtx := internal.BindingContext{}
	reqParams := &{{>request-type}}{}
	{{#pathParams}}
	{{#-first}}// path params
	{{/-first}}p.bind{{nameInPascalCase}}(&bindingCtx, readPathValue("{{baseName}}", router, req), &reqParams.{{nameInPascalCase}})
	{{/pathParams}}
	{{#queryParams}}
	{{#-first}}// query params
	query := req.URL.Query()
	{{/-first}}p.bind{{nameInPascalCase}}(&bindingCtx, readQueryValue("{{baseName}}", query), &reqParams.{{nameInPascalCase}})
	{{/queryParams}}
	{{#bodyParams}}
	{{#-first}}// body params
	{{/-first}}p.bind{{nameInPascalCase}}(&bindingCtx, readRequestBodyValue(req), &reqParams.Payload)
	{{/bodyParams}}
	return reqParams, bindingCtx.AggregatedError()
}

func newParamsParser{{baseName}}{{operationId}}(app *HTTPApp) paramsParser[*{{>request-type}}] {
	return &paramsParser{{baseName}}{{operationId}}{
		{{#allParams}}
		bind{{nameInPascalCase}}: newRequestParamBinder(binderParams[{{>params/binder-types}}]{
			field: "{{baseName}}",
			location: "{{#vendorExtensions}}{{x-apigen-param-location}}{{/vendorExtensions}}",
			required: {{required}},
			parseValue: {{>params/parse-non-array-value}},
			validateValue: {{#isArray}}internal.NewArrayValidator(
				internal.New{{#items}}{{{dataType}}}{{/items}}Validator(internal.ModelValidatorParams{Location: "body"}),
			),{{/isArray}}{{^isArray}}{{#isBodyParam}}{{#isNullable}}internal.SkipNullFieldValidator({{/isNullable}}internal.New{{dataType}}Validator(internal.ModelValidatorParams{Location: "body"}){{#isNullable}}){{/isNullable}},{{/isBodyParam}}{{^isBodyParam}}{{#lambda.tab_indented_3}}{{>params/simple-validator}}{{/lambda.tab_indented_3}},{{/isBodyParam}}{{/isArray}}
		}),
		{{/allParams}}
	}
}{{^-last}}

{{/-last}}{{/hasParams}}{{/operation}}
{{/operations}}
