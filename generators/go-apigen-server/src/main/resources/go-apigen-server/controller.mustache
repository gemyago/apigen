{{ #generatedCodeComment }}// {{.}}.

{{/generatedCodeComment}}package {{ package }}

import (
	"net/http"
	{{#hasImportedModel}}

	. "{{modelFullPackage}}"
{{/hasImportedModel}}
)

{{#hasImportedModel}}
// Below is to workaround unused imports if that happens.
type _ func() {{importedModels.0}}{{/hasImportedModel}}

type {{classname}}Controller interface {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	{{operationId}}({{^hasParams}}NoParams{{/hasParams}}{{^returnType}}NoResponse{{/returnType}}HandlerBuilder{{#vendorExtensions.x-apigen-has-params-or-return}}[{{/vendorExtensions.x-apigen-has-params-or-return}}{{#hasParams}}
		*{{>request-type}},{{/hasParams}}{{#returnType}}
		*{{.}},{{/returnType}}{{#vendorExtensions.x-apigen-has-params-or-return}}
	]{{/vendorExtensions.x-apigen-has-params-or-return}}) http.Handler{{^-last}}

{{/-last}}{{/operation}}
{{/operations}}
}

// Register{{classname}}Routes will attach the following routes to the root handler:
// {{#operations}}{{#operation}}
// - {{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}} {{{path}}}
// {{/operation}}{{/operations}}
// Routes will use provided controller to handle requests.
func(rootHandler *RootHandler) Register{{classname}}Routes(controller {{classname}}Controller) *RootHandler {
	builder := new{{classname}}ControllerBuilder(rootHandler)
	{{#operations}}
	{{#operation}}
	rootHandler.router.HandleRoute("{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}", "{{{path}}}", controller.{{operationId}}(builder.{{operationId}}))
	{{/operation}}
	{{/operations}}
	return rootHandler
}