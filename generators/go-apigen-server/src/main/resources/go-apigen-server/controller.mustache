{{ #generatedCodeComment }}// {{.}}.

{{/generatedCodeComment}}package {{ package }}

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
	{{#hasImportedModel}}

	. "{{invokerPackage}}/models"
{{/hasImportedModel}}
)

// Below is to workaround unused imports.
var _ = http.MethodGet
var _ = time.Time{}
var _ = json.Unmarshal
var _ = fmt.Sprint{{#hasImportedModel}}
type _ func() {{importedModels.0}}{{/hasImportedModel}}
{{#operations}}{{#operation}}{{#allParams}}{{#isEnum}}
{{>enums/type}}{{/isEnum}}{{/allParams}}{{/operation}}{{/operations}}{{#operations}}
{{#operation}}
{{#allParams.0}}// {{>request-type}} represents params for {{operationIdOriginal}} operation
//
// Request: {{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}} {{{path}}}.
type {{>request-type}} struct {
	{{#allParams}}
	// {{nameInPascalCase}} is parsed from request {{vendorExtensions.x-apigen-param-location}} and declared as {{baseName}}.
	{{nameInPascalCase}} {{>fields/type}}
	{{/allParams}}
}{{/allParams.0}}{{^-last}}

{{/-last}}
{{/operation}}

{{/operations}}

type {{classname}}Controller interface {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	{{operationId}}({{^hasParams}}NoParams{{/hasParams}}{{^returnType}}NoResponse{{/returnType}}HandlerBuilder{{#vendorExtensions.x-apigen-has-params-or-return}}[{{/vendorExtensions.x-apigen-has-params-or-return}}{{#hasParams}}
		*{{>request-type}},{{/hasParams}}{{#returnType}}
		*{{.}},{{/returnType}}{{#vendorExtensions.x-apigen-has-params-or-return}}
	]{{/vendorExtensions.x-apigen-has-params-or-return}}) http.Handler{{^-last}}

{{/-last}}{{/operation}}
{{/operations}}
}

// Register{{classname}}Routes will attach the following routes to the root handler:
// {{#operations}}{{#operation}}
// - {{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}} {{{path}}}
// {{/operation}}{{/operations}}
// Routes will use provided controller to handle requests.
func(rootHandler *RootHandler) Register{{classname}}Routes(controller {{classname}}Controller) *RootHandler {
	builder := new{{classname}}ControllerBuilder(rootHandler)
	{{#operations}}
	{{#operation}}
	rootHandler.router.HandleRoute("{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}", "{{{path}}}", controller.{{operationId}}(builder.{{operationId}}))
	{{/operation}}
	{{/operations}}
	return rootHandler
}