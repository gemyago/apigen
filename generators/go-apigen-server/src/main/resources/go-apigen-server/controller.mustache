{{ #generatedCodeComment }}// {{.}}.

{{/generatedCodeComment}}package {{ package }}

import (
	"encoding/json"
	"fmt"
	"time"
	{{#hasImportedModel}}

	"{{invokerPackage}}/models"
{{/hasImportedModel}}
)

// Below is to workaround unused imports.
var _ = time.Time{}
var _ = json.Unmarshal
var _ = fmt.Sprint

{{#operations}}
{{#operation}}
{{#allParams.0}}{{#allParams}}{{#isEnum}}
{{>enums/param-type}}
{{/isEnum}}{{/allParams}}// {{>request-type}} represents params for {{operationIdOriginal}} operation
//
// Request: {{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}} {{{path}}}.
type {{>request-type}} struct {
	{{#allParams}}
	// {{nameInPascalCase}} is parsed from request {{vendorExtensions.x-apigen-param-location}} and declared as {{paramName}}.
	{{nameInPascalCase}} {{>params/type}}
	{{/allParams}}
}{{/allParams.0}}{{^-last}}

{{/-last}}
{{/operation}}

{{/operations}}

type {{baseName}}Controller struct {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	{{operationId}} httpHandlerFactory{{^-last}}

{{/-last}}{{/operation}}
{{/operations}}
}

type {{baseName}}ControllerBuilder struct {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	Handle{{operationId}} {{>action-builder-type}}{{^-last}}

{{/-last}}{{/operation}}
{{/operations}}
}

func (c *{{baseName}}ControllerBuilder) Finalize() *{{baseName}}Controller {
	return &{{baseName}}Controller{
		{{#operations}}
		{{#operation}}
		{{operationId}}: mustInitializeAction("{{operationIdOriginal}}", c.Handle{{operationId}}.httpHandlerFactory),
		{{/operation}}
		{{/operations}}
	}
}

func Build{{baseName}}Controller() *{{baseName}}ControllerBuilder {
	controllerBuilder := &{{baseName}}ControllerBuilder{}

	{{#operations}}
	{{#operation}}
	// {{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}} {{{path}}}
	controllerBuilder.Handle{{operationId}}.controllerBuilder = controllerBuilder
	controllerBuilder.Handle{{operationId}}.defaultStatusCode = {{#responses.0}}{{ code }}{{/responses.0}}{{^responses.0}}200{{/responses.0}}{{^returnType}}
	controllerBuilder.Handle{{operationId}}.voidResult = true{{/returnType}}{{#hasParams}}
	controllerBuilder.Handle{{operationId}}.paramsParserFactory = newParamsParser{{baseName}}{{operationId}}{{/hasParams}}

	{{/operation}}
	{{/operations}}
	return controllerBuilder
}

func Register{{baseName}}Routes(controller *{{baseName}}Controller, app *HTTPApp) {
	{{#operations}}
	{{#operation}}
	app.router.HandleRoute("{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}", "{{{path}}}", controller.{{operationId}}(app))
	{{/operation}}
	{{/operations}}
}
