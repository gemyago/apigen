{{ #generatedCodeComment }}// {{.}}.

{{/generatedCodeComment}}package {{ package }}

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
	{{#hasImportedModel}}

	. "{{invokerPackage}}/models"
{{/hasImportedModel}}
)

// Below is to workaround unused imports.
var _ = http.MethodGet
var _ = time.Time{}
var _ = json.Unmarshal
var _ = fmt.Sprint{{#hasImportedModel}}
type _ func() {{importedModels.0}}{{/hasImportedModel}}
{{#operations}}{{#operation}}{{#allParams}}{{#isEnum}}
{{>enums/type}}{{/isEnum}}{{/allParams}}{{/operation}}{{/operations}}{{#operations}}
{{#operation}}
{{#allParams.0}}// {{>request-type}} represents params for {{operationIdOriginal}} operation
//
// Request: {{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}} {{{path}}}.
type {{>request-type}} struct {
	{{#allParams}}
	// {{nameInPascalCase}} is parsed from request {{vendorExtensions.x-apigen-param-location}} and declared as {{paramName}}.
	{{nameInPascalCase}} {{>fields/type}}
	{{/allParams}}
}{{/allParams.0}}{{^-last}}

{{/-last}}
{{/operation}}

{{/operations}}

type {{classname}}Controller struct {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	{{operationId}} httpHandlerFactory{{^-last}}

{{/-last}}{{/operation}}
{{/operations}}
}

type {{classname}}ControllerBuilder struct {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	Handle{{operationId}} {{>action-builder-type}}{{^-last}}

{{/-last}}{{/operation}}
{{/operations}}
}

func (c *{{classname}}ControllerBuilder) Finalize() *{{classname}}Controller {
	return &{{classname}}Controller{
		{{#operations}}
		{{#operation}}
		{{operationId}}: mustInitializeAction("{{operationIdOriginal}}", c.Handle{{operationId}}.httpHandlerFactory),
		{{/operation}}
		{{/operations}}
	}
}

func Build{{classname}}Controller() *{{classname}}ControllerBuilder {
	controllerBuilder := &{{classname}}ControllerBuilder{}

	{{#operations}}
	{{#operation}}
	// {{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}} {{{path}}}
	controllerBuilder.Handle{{operationId}}.controllerBuilder = controllerBuilder
	controllerBuilder.Handle{{operationId}}.defaultStatusCode = {{#responses.0}}{{ code }}{{/responses.0}}{{^responses.0}}200{{/responses.0}}{{^returnType}}
	controllerBuilder.Handle{{operationId}}.voidResult = true{{/returnType}}
	controllerBuilder.Handle{{operationId}}.paramsParserFactory = {{#hasParams}}newParamsParser{{baseName}}{{operationId}}{{/hasParams}}{{^hasParams}}makeVoidParamsParser{{/hasParams}}

	{{/operation}}
	{{/operations}}
	return controllerBuilder
}

func Register{{baseName}}Routes(controller *{{baseName}}Controller, app *HTTPApp) {
	{{#operations}}
	{{#operation}}
	app.router.HandleRoute("{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}", "{{{path}}}", controller.{{operationId}}(app))
	{{/operation}}
	{{/operations}}
}

type {{classname}}ControllerBuilderV2 struct {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	{{operationId}} {{#lambda.tab_indented_2}}{{>action-builder-type-v2}}{{/lambda.tab_indented_2}}{{^-last}}

{{/-last}}{{/operation}}
{{/operations}}
}

func new{{classname}}ControllerBuilderV2(app *HTTPApp) *{{classname}}ControllerBuilderV2 {
	return &{{classname}}ControllerBuilderV2{
		{{#operations}}
		{{#operation}}
		// {{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}} {{{path}}}
		{{operationId}}: makeActionBuilder(
			app,
			newHandlerAdapter{{^hasParams}}NoParams{{/hasParams}}{{^returnType}}NoResponse{{/returnType}}[
				{{^hasParams}}Void{{/hasParams}}{{#hasParams}}{{baseName}}{{operationId}}Request{{/hasParams}},
				{{^returnType}}Void{{/returnType}}{{#returnType}}{{.}}{{/returnType}},
			](),
			newHTTPHandlerAdapter{{^hasParams}}NoParams{{/hasParams}}{{^returnType}}NoResponse{{/returnType}}[
				{{^hasParams}}Void{{/hasParams}}{{#hasParams}}{{baseName}}{{operationId}}Request{{/hasParams}},
				{{^returnType}}Void{{/returnType}}{{#returnType}}{{.}}{{/returnType}},
			](),
			makeActionBuilderParams[
				{{^hasParams}}Void{{/hasParams}}{{#hasParams}}{{baseName}}{{operationId}}Request{{/hasParams}},
				{{^returnType}}Void{{/returnType}}{{#returnType}}{{.}}{{/returnType}},
			]{
				defaultStatus: {{#responses.0}}{{ code }}{{/responses.0}}{{^responses.0}}200{{/responses.0}},{{^returnType}}
				voidResult:    true,{{/returnType}}
				paramsParser:  {{#hasParams}}newParamsParser{{baseName}}{{operationId}}{{/hasParams}}{{^hasParams}}makeVoidParamsParserV2{{/hasParams}}(app),
			},
		),{{^-last}}

{{/-last}}{{/operation}}
		{{/operations}}
	}
}

type {{classname}}ControllerV2 interface {
{{#operations}}
{{#operation}}
	{{#lambda.tab_indented_2}}{{>operation-doc}}{{/lambda.tab_indented_2}}
	{{operationId}}(b *{{classname}}ControllerBuilderV2) http.Handler{{^-last}}

{{/-last}}{{/operation}}
{{/operations}}
}

func Register{{baseName}}RoutesV2(controller {{baseName}}ControllerV2, app *HTTPApp) {
	builder := new{{classname}}ControllerBuilderV2(app)
	{{#operations}}
	{{#operation}}
	app.router.HandleRoute("{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}", "{{{path}}}", controller.{{operationId}}(builder))
	{{/operation}}
	{{/operations}}
}