{{#description}}// {{{classname}}} : {{{description}}}{{/description}}
type assignable{{{classname}}} interface {
	{{#allowableValues}}
	{{#enumVars}}
	Is{{#lambda.pascalcase}}{{{value}}}{{/lambda.pascalcase}}() bool
	{{/enumVars}}
	{{/allowableValues}}
	String() string
}

type {{{classname}}} {{^format}}{{dataType}}{{/format}}{{{format}}}

// List of {{{classname}}}
const (
	{{#allowableValues}}
	{{#enumVars}}
	{{#enumClassPrefix}}{{{classname}}}{{/enumClassPrefix}}{{#lambda.pascalcase}}{{{value}}}{{/lambda.pascalcase}} {{{classname}}} = {{{value}}}
	{{/enumVars}}
	{{/allowableValues}}
)

{{#allowableValues}}
{{#enumVars}}
func(v {{{classname}}}) Is{{#lambda.pascalcase}}{{{value}}}{{/lambda.pascalcase}}() bool {
  return v == {{{classname}}}{{#lambda.pascalcase}}{{{value}}}{{/lambda.pascalcase}}
}

{{/enumVars}}
{{/allowableValues}}
func(v {{{classname}}}) String() string {
	return string(v)
}

func As{{{classname}}}(v assignable{{{classname}}}) ({{{classname}}}) {
	return {{{classname}}}(v.String())
}

func (v *{{{classname}}}) UnmarshalJSON(data []byte) error {
	var str string
	err := json.Unmarshal(data, &str)
	if err != nil {
		return err
	}
	switch str {
	{{#allowableValues}}
	{{#enumVars}}
	case {{{value}}}:
		*v = {{#enumClassPrefix}}{{{classname}}}{{/enumClassPrefix}}{{#lambda.pascalcase}}{{{value}}}{{/lambda.pascalcase}}
	{{/enumVars}}
	{{/allowableValues}}
	default:
		return fmt.Errorf("unexpected {{{classname}}} value: %s", str)
	}
	return nil
}

// All allowed values of {{{classname}}} enum
var Allowed{{{classname}}}Values = []{{{classname}}}{
	{{#allowableValues}}
	{{#enumVars}}
	{{#enumClassPrefix}}{{{classname}}}{{/enumClassPrefix}}{{#lambda.pascalcase}}{{{value}}}{{/lambda.pascalcase}},
	{{/enumVars}}
	{{/allowableValues}}
}
